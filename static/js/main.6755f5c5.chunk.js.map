{"version":3,"sources":["selectors/getIsTasks.ts","selectors/getIsTodoList.ts","components/AddItemForm/AddItemForm.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","components/EditableSpan/EditableSpan.tsx","store/tasksReducer.ts","App.tsx","store/todoListsReducer.ts","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["getIsTasks","state","tasks","getIsTodoList","todoLists","AddItemForm","memo","addItem","useState","title","setTitle","error","setError","addAnItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","Task","changeTaskStatus","changeTaskTitle","removeTask","task","todolistId","index","onClickHandler","id","onChangeHandler","doneValue","checked","onTitleChangeHandler","useCallback","draggableId","provided","snapshot","draggableProps","ref","innerRef","style","isDragging","draggableStyle","background","borderRadius","dragHandleProps","Checkbox","isDone","EditableSpan","Todolist","changeFilter","addTask","deleteTask","deleteTodolist","changeTodoListTitle","filter","addTaskNew","newTitle","changeTodolistTitle","changeTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","t","droppableId","droppableProps","map","placeholder","paddingTop","Button","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","initialState","count","App","useSelector","dispatch","useDispatch","todoListId","type","taskId","addNewTask","changeStatus","removeTodolist","addTodoList","v1","addTodolist","Container","fixed","Grid","container","padding","spacing","onDragEnd","result","source","destination","newTaskIds","Array","from","splice","newOrder","item","Paper","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","newTask","newTasks","todolistTasks","newTasksArray","copyState","tl","todolist","find","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6755f5c5.chunk.js","sourcesContent":["import { AppRootStateType } from '../store/store';\nimport { TasksStateType } from '../types/types';\n\nexport const getIsTasks = (state: AppRootStateType): TasksStateType => state.tasks;\n","import { AppRootStateType } from '../store/store';\nimport { TodoListType } from '../types/types';\n\nexport const getIsTodoList = (state: AppRootStateType): TodoListType[] => state.todoLists;\n","import React, { ChangeEvent, FC, KeyboardEvent, memo, useState } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport AddBoxTwoToneIcon from '@material-ui/icons/AddBoxTwoTone';\n\nimport { Nullable } from '../../types/Nullable';\n\nimport { AddItemFormPropsType } from './types';\n\nexport const AddItemForm: FC<AddItemFormPropsType> = memo(({ addItem }) => {\n  const [title, setTitle] = useState('');\n  const [error, setError] = useState<Nullable<string>>(null);\n\n  const addAnItem = (): void => {\n    if (title.trim() !== '') {\n      addItem(title);\n      setTitle('');\n    } else {\n      setError('Title is required');\n    }\n  };\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.charCode === 13) {\n      addAnItem();\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        variant=\"standard\"\n        error={!!error}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        label=\"Title\"\n        helperText={error}\n      />\n      <IconButton color=\"primary\" onClick={addAnItem}>\n        <AddBoxTwoToneIcon />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { ChangeEvent, CSSProperties, FC, memo, useCallback } from 'react';\n\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport DehazeIcon from '@material-ui/icons/Dehaze';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { TaskPropsType } from './types';\n\nimport { EditableSpan } from 'components';\n\nexport const Task: FC<TaskPropsType> = memo(\n  ({ changeTaskStatus, changeTaskTitle, removeTask, task, todolistId, index }) => {\n    const onClickHandler = (): void => removeTask(task.id, todolistId);\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n      const doneValue = e.currentTarget.checked;\n      changeTaskStatus(task.id, doneValue, todolistId);\n    };\n    const onTitleChangeHandler = useCallback(\n      (value: string) => {\n        changeTaskTitle(task.id, value, todolistId);\n      },\n      [task.id, changeTaskTitle, todolistId],\n    );\n\n    const getItemStyle = (\n      isDragging: boolean,\n      draggableStyle: any,\n    ): CSSProperties | undefined => ({\n      background: isDragging ? '#3f51b5' : 'white',\n      color: isDragging ? 'white' : 'black',\n      borderRadius: `5px`,\n      ...draggableStyle,\n    });\n\n    return (\n      <Draggable draggableId={task.id} index={index}>\n        {(provided, snapshot) => (\n          <div\n            {...provided.draggableProps}\n            ref={provided.innerRef}\n            style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n          >\n            <IconButton {...provided.dragHandleProps}>\n              <DehazeIcon />\n            </IconButton>\n            <Checkbox\n              checked={task.isDone}\n              color=\"secondary\"\n              onChange={onChangeHandler}\n            />\n\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\n            <IconButton onClick={onClickHandler}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </div>\n        )}\n      </Draggable>\n    );\n  },\n);\n","import React, { FC, memo, useCallback } from 'react';\n\nimport { Button, IconButton } from '@material-ui/core';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport { AddItemForm } from '../AddItemForm';\n\nimport { TodoListPropsType } from './types';\n\nimport { EditableSpan, Task } from 'components';\n\nexport const Todolist: FC<TodoListPropsType> = memo(\n  ({\n    id,\n    title,\n    tasks,\n    changeFilter,\n    addTask,\n    changeTaskStatus,\n    changeTaskTitle,\n    deleteTask,\n    deleteTodolist,\n    changeTodoListTitle,\n    filter,\n  }) => {\n    const addTaskNew = useCallback(\n      (newTitle: string) => {\n        addTask(newTitle, id);\n      },\n      [addTask, id],\n    );\n\n    const removeTodolist = (): void => deleteTodolist(id);\n    const changeTodolistTitle = useCallback(\n      (changeTitle: string) => {\n        changeTodoListTitle(id, changeTitle);\n      },\n      [id, changeTodoListTitle],\n    );\n\n    const onAllClickHandler = useCallback(\n      () => changeFilter('all', id),\n      [changeFilter, id],\n    );\n    const onActiveClickHandler = useCallback(\n      () => changeFilter('active', id),\n      [changeFilter, id],\n    );\n    const onCompletedClickHandler = useCallback(\n      () => changeFilter('completed', id),\n      [changeFilter, id],\n    );\n\n    let tasksForTodolist = tasks;\n\n    if (filter === 'active') {\n      tasksForTodolist = tasks.filter(t => !t.isDone);\n    }\n    if (filter === 'completed') {\n      tasksForTodolist = tasks.filter(t => t.isDone);\n    }\n    return (\n      <div>\n        <h3>\n          <EditableSpan value={title} onChange={changeTodolistTitle} />\n          <IconButton onClick={removeTodolist}>\n            <DeleteForeverIcon />\n          </IconButton>\n        </h3>\n        <AddItemForm addItem={addTaskNew} />\n\n        <Droppable key={id} droppableId={id}>\n          {provided => (\n            <div {...provided.droppableProps} ref={provided.innerRef}>\n              {tasksForTodolist.map((task, index) => (\n                <Task\n                  task={task}\n                  changeTaskStatus={changeTaskStatus}\n                  changeTaskTitle={changeTaskTitle}\n                  removeTask={deleteTask}\n                  todolistId={id}\n                  key={task.id}\n                  index={index}\n                />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n\n        <div style={{ paddingTop: '10px' }}>\n          <Button\n            variant={filter === 'all' ? 'contained' : 'text'}\n            onClick={onAllClickHandler}\n            color=\"primary\"\n          >\n            All\n          </Button>\n          <Button\n            variant={filter === 'active' ? 'contained' : 'text'}\n            onClick={onActiveClickHandler}\n            color=\"default\"\n          >\n            Active\n          </Button>\n          <Button\n            variant={filter === 'completed' ? 'contained' : 'text'}\n            onClick={onCompletedClickHandler}\n            color=\"secondary\"\n          >\n            Completed\n          </Button>\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { ChangeEvent, FC, memo, useState } from 'react';\n\nimport { TextField } from '@material-ui/core';\n\nimport { EditableSpanPropsType } from './types';\n\nexport const EditableSpan: FC<EditableSpanPropsType> = memo(({ value, onChange }) => {\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState(value);\n\n  const activateEditMode = (): void => {\n    setEditMode(true);\n    setTitle(value);\n  };\n  const activateViewMode = (): void => {\n    setEditMode(false);\n    onChange(title);\n  };\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n  ) : (\n    <span onDoubleClick={activateEditMode}>{value}</span>\n  );\n});\n","import { v1 } from 'uuid';\n\nimport { TaskType } from '../components/Todolist/types';\nimport { TasksStateType } from '../types/types';\n\nimport { AddTodoListActionType, DeleteTodoListActionType } from 'store/todoListsReducer';\n\nconst initialState: TasksStateType = {\n  count: [],\n};\n\nexport const tasksReducer = (\n  // eslint-disable-next-line default-param-last\n  state: InitialState = initialState,\n  action: ActionsType,\n): InitialState => {\n  switch (action.type) {\n    case 'DELETE-TASK': {\n      const stateCopy = { ...state };\n      const tasks = stateCopy[action.todolistId];\n      stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId);\n      return stateCopy;\n    }\n    case 'ADD-TASK': {\n      const stateCopy = { ...state };\n      const newTask: TaskType = {\n        id: v1(),\n        title: action.title,\n        isDone: false,\n      };\n      const tasks = stateCopy[action.todolistId];\n      const newTasks = [newTask, ...tasks];\n      stateCopy[action.todolistId] = newTasks;\n      return stateCopy;\n    }\n    case 'CHANGE-TASK-STATUS': {\n      const stateCopy = { ...state };\n      const todolistTasks = state[action.todolistId];\n      const newTasksArray = todolistTasks.map(t =>\n        t.id === action.taskId ? { ...t, isDone: action.isDone } : t,\n      );\n      stateCopy[action.todolistId] = newTasksArray;\n      return stateCopy;\n    }\n    case 'CHANGE-TASK-TITLE': {\n      const stateCopy = { ...state };\n      const todolistTasks = state[action.todolistId];\n      const newTasksArray = todolistTasks.map(t =>\n        t.id === action.taskId ? { ...t, title: action.title } : t,\n      );\n      stateCopy[action.todolistId] = newTasksArray;\n      return stateCopy;\n    }\n    case 'ADD-TODOLIST': {\n      return {\n        ...state,\n        [action.todolistId]: [],\n      };\n    }\n    case 'DELETE-TODOLIST': {\n      const copyState = { ...state };\n      delete copyState[action.todolistId];\n      return copyState;\n    }\n    case 'UPDATE-TASK': {\n      const stateCopy = { ...state };\n      stateCopy[action.todolistId] = action.task;\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n};\n\nexport const deleteTask = (taskId: string, todolistId: string) =>\n  ({\n    type: 'DELETE-TASK',\n    taskId,\n    todolistId,\n  } as const);\nexport const addTask = (title: string, todolistId: string) =>\n  ({\n    type: 'ADD-TASK',\n    title,\n    todolistId,\n  } as const);\nexport const changeTaskStatus = (taskId: string, isDone: boolean, todolistId: string) =>\n  ({\n    type: 'CHANGE-TASK-STATUS',\n    isDone,\n    todolistId,\n    taskId,\n  } as const);\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) =>\n  ({\n    type: 'CHANGE-TASK-TITLE',\n    title,\n    todolistId,\n    taskId,\n  } as const);\nexport const updateTask = (task: TaskType[], todolistId: string) =>\n  ({\n    type: 'UPDATE-TASK',\n    task,\n    todolistId,\n  } as const);\n// type\nexport type InitialState = typeof initialState;\nexport type DeleteTaskActionType = ReturnType<typeof deleteTask>;\nexport type AddTaskActionType = ReturnType<typeof addTask>;\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatus>;\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitle>;\nexport type UpdateTaskActionType = ReturnType<typeof updateTask>;\n\ntype ActionsType =\n  | DeleteTaskActionType\n  | AddTaskActionType\n  | ChangeTaskStatusActionType\n  | ChangeTaskTitleActionType\n  | AddTodoListActionType\n  | DeleteTodoListActionType\n  | UpdateTaskActionType;\n","import React, { ReactElement, useCallback } from 'react';\n\nimport { Container, Grid, Paper } from '@material-ui/core';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getIsTasks } from './selectors/getIsTasks';\nimport { getIsTodoList } from './selectors/getIsTodoList';\nimport { FilterType, TasksStateType, TodoListType } from './types/types';\n\nimport { AddItemForm, Todolist } from 'components';\nimport { AppRootStateType } from 'store/store';\nimport {\n  addTask,\n  changeTaskStatus,\n  changeTaskTitle,\n  deleteTask,\n  updateTask,\n} from 'store/tasksReducer';\nimport {\n  addTodolist,\n  changeTodolistFilter,\n  changeTodolistTitle,\n  deleteTodoList,\n} from 'store/todoListsReducer';\n\nconst App = function (): ReactElement {\n  const todoLists = useSelector<AppRootStateType, TodoListType[]>(getIsTodoList);\n  const tasks = useSelector<AppRootStateType, TasksStateType>(getIsTasks);\n  const dispatch = useDispatch();\n\n  const removeTask = useCallback(\n    (id: string, todoListId: string) => {\n      dispatch(deleteTask(id, todoListId));\n    },\n    [dispatch],\n  );\n\n  const addNewTask = useCallback(\n    (title: string, todoListId: string) => {\n      dispatch(addTask(title, todoListId));\n    },\n    [dispatch],\n  );\n\n  const changeStatus = useCallback(\n    (id: string, isDone: boolean, todoListId: string) => {\n      dispatch(changeTaskStatus(id, isDone, todoListId));\n    },\n    [dispatch],\n  );\n\n  const changeTitle = useCallback(\n    (id: string, newTitle: string, todolistId: string) => {\n      dispatch(changeTaskTitle(id, newTitle, todolistId));\n    },\n    [dispatch],\n  );\n\n  const changeFilter = useCallback(\n    (value: FilterType, todolistId: string) => {\n      dispatch(changeTodolistFilter(todolistId, value));\n    },\n    [dispatch],\n  );\n\n  const removeTodolist = useCallback(\n    (id: string) => {\n      dispatch(deleteTodoList(id));\n    },\n    [dispatch],\n  );\n\n  const changeTodoListTitle = useCallback(\n    (id: string, title: string) => {\n      dispatch(changeTodolistTitle(id, title));\n    },\n    [dispatch],\n  );\n\n  const addTodoList = useCallback(\n    (title: string) => {\n      dispatch(addTodolist(title));\n    },\n    [dispatch],\n  );\n\n  return (\n    <Container fixed>\n      <Grid container style={{ padding: '20px' }}>\n        <AddItemForm addItem={addTodoList} />\n      </Grid>\n\n      <Grid container spacing={3}>\n        {todoLists.map(({ id, title, filter }) => {\n          const tasksForTodolist = tasks[id];\n\n          const onDragEnd = (result: DropResult): void => {\n            const { source, destination } = result;\n            if (!destination) return;\n\n            const newTaskIds = Array.from(tasksForTodolist);\n            const [newOrder] = newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, newOrder);\n\n            dispatch(updateTask(newTaskIds, id));\n          };\n          return (\n            <DragDropContext key={id} onDragEnd={onDragEnd}>\n              <Grid item key={id}>\n                <Paper elevation={3} style={{ padding: '10px' }}>\n                  <Todolist\n                    key={id}\n                    id={id}\n                    title={title}\n                    tasks={tasksForTodolist}\n                    deleteTask={removeTask}\n                    changeFilter={changeFilter}\n                    addTask={addNewTask}\n                    changeTaskStatus={changeStatus}\n                    filter={filter}\n                    deleteTodolist={removeTodolist}\n                    changeTaskTitle={changeTitle}\n                    changeTodoListTitle={changeTodoListTitle}\n                  />\n                </Paper>\n              </Grid>\n            </DragDropContext>\n          );\n        })}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import { v1 } from 'uuid';\n\nimport { FilterType, TodoListType } from '../types/types';\n\nexport const todoListsReducer = (\n  // eslint-disable-next-line default-param-last\n  state: TodoListType[] = [],\n  action: ActionsType,\n): TodoListType[] => {\n  switch (action.type) {\n    case 'DELETE-TODOLIST': {\n      return state.filter(tl => tl.id !== action.todolistId);\n    }\n    case 'ADD-TODOLIST': {\n      return [\n        {\n          id: action.todolistId,\n          title: action.title,\n          filter: 'all',\n        },\n        ...state,\n      ];\n    }\n    case 'CHANGE-TODOLIST-TITLE': {\n      const todolist = state.find(tl => tl.id === action.id);\n      if (todolist) {\n        todolist.title = action.title;\n      }\n      return [...state];\n    }\n    case 'CHANGE-TODOLIST-FILTER': {\n      const todolist = state.find(tl => tl.id === action.id);\n      if (todolist) {\n        todolist.filter = action.filter;\n      }\n      return [...state];\n    }\n    default:\n      return state;\n  }\n};\n\nexport const deleteTodoList = (todolistId: string) =>\n  ({\n    type: 'DELETE-TODOLIST',\n    todolistId,\n  } as const);\nexport const addTodolist = (title: string) =>\n  ({\n    type: 'ADD-TODOLIST',\n    title,\n    todolistId: v1(),\n  } as const);\nexport const changeTodolistTitle = (id: string, title: string) =>\n  ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title,\n  } as const);\nexport const changeTodolistFilter = (id: string, filter: FilterType) =>\n  ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter,\n  } as const);\n\n// type\nexport type DeleteTodoListActionType = ReturnType<typeof deleteTodoList>;\nexport type AddTodoListActionType = ReturnType<typeof addTodolist>;\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodolistTitle>;\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodolistFilter>;\n\nexport type ActionsType =\n  | DeleteTodoListActionType\n  | AddTodoListActionType\n  | ChangeTodoListTitleActionType\n  | ChangeTodoListFilterActionType;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from 'redux';\n\nimport { tasksReducer } from './tasksReducer';\nimport { todoListsReducer } from './todoListsReducer';\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todoLists: todoListsReducer,\n});\n\nexport const store = createStore(rootReducer);\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}