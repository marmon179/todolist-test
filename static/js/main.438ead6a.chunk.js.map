{"version":3,"sources":["components/AddItemForm/AddItemForm.tsx","components/Task/Task.tsx","store/tasksReducer.ts","components/Todolist/Todolist.tsx","components/EditableSpan/EditableSpan.tsx","App.tsx","store/todoListsReducer.ts","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["AddItemForm","React","memo","addItem","useState","title","setTitle","error","setError","addAnItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","Task","changeTaskStatus","changeTaskTitle","removeTask","task","todolistId","index","onClickHandler","id","onChangeHandler","doneValue","checked","onTitleChangeHandler","useCallback","draggableId","provided","snapshot","draggableProps","ref","innerRef","style","isDragging","draggableStyle","background","borderRadius","dragHandleProps","Checkbox","isDone","EditableSpan","initialState","count","Todolist","tasks","changeFilter","addTask","deleteTask","deleteTodolist","changeTodoListTitle","filter","dispatch","useDispatch","addTaskNew","newTitle","changeTodolistTitle","changeTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","t","onDragEnd","result","source","destination","newTaskIds","Array","from","splice","newOrder","type","droppableId","droppableProps","map","placeholder","paddingTop","Button","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","App","todoLists","useSelector","state","todoListId","taskId","addNewTask","changeStatus","removeTodolist","addTodoList","v1","addTodolist","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","newTask","newTasks","todolistTasks","newTasksArray","copyState","todolist","find","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.438ead6a.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport AddBoxTwoToneIcon from '@material-ui/icons/AddBoxTwoTone';\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({ addItem }) => {\n  const [title, setTitle] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  const addAnItem = (): void => {\n    if (title.trim() !== '') {\n      addItem(title);\n      setTitle('');\n    } else {\n      setError('Title is required');\n    }\n  };\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.charCode === 13) {\n      addAnItem();\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        variant=\"standard\"\n        error={!!error}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        label=\"Title\"\n        helperText={error}\n      />\n      <IconButton color=\"primary\" onClick={addAnItem}>\n        <AddBoxTwoToneIcon />\n      </IconButton>\n    </div>\n  );\n});\n// type\ntype AddItemFormPropsType = {\n  addItem: (title: string) => void;\n};\n","import React, { ChangeEvent, CSSProperties, useCallback } from 'react';\n\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport DehazeIcon from '@material-ui/icons/Dehaze';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { EditableSpan } from 'components';\nimport { TaskType } from 'components/Todolist/Todolist';\n\nexport const Task: React.FC<TaskPropsType> = React.memo(\n  ({ changeTaskStatus, changeTaskTitle, removeTask, task, todolistId, index }) => {\n    const onClickHandler = (): void => removeTask(task.id, todolistId);\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n      const doneValue = e.currentTarget.checked;\n      changeTaskStatus(task.id, doneValue, todolistId);\n    };\n    const onTitleChangeHandler = useCallback(\n      (value: string) => {\n        changeTaskTitle(task.id, value, todolistId);\n      },\n      [task.id, changeTaskTitle, todolistId],\n    );\n\n    const getItemStyle = (\n      isDragging: boolean,\n      draggableStyle: any,\n    ): CSSProperties | undefined => ({\n      background: isDragging ? '#3f51b5' : 'white',\n      color: isDragging ? 'white' : 'black',\n      borderRadius: `5px`,\n      ...draggableStyle,\n    });\n\n    return (\n      <Draggable draggableId={task.id} index={index}>\n        {(provided, snapshot) => (\n          <div\n            {...provided.draggableProps}\n            ref={provided.innerRef}\n            style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n          >\n            <IconButton {...provided.dragHandleProps}>\n              <DehazeIcon />\n            </IconButton>\n            <Checkbox\n              checked={task.isDone}\n              color=\"secondary\"\n              onChange={onChangeHandler}\n            />\n\n            <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\n            <IconButton onClick={onClickHandler}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </div>\n        )}\n      </Draggable>\n    );\n  },\n);\n// type\ntype TaskPropsType = {\n  changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void;\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n  task: TaskType;\n  todolistId: string;\n  index: number;\n};\n","import { v1 } from 'uuid';\n\nimport { TasksStateType } from 'App';\nimport { TaskType } from 'components/Todolist/Todolist';\nimport { AddTodoListActionType, DeleteTodoListActionType } from 'store/todoListsReducer';\n\nconst initialState: TasksStateType = {\n  count: [],\n};\n\nexport const tasksReducer = (\n  // eslint-disable-next-line default-param-last\n  state: InitialState = initialState,\n  action: ActionsType,\n): InitialState => {\n  switch (action.type) {\n    case 'DELETE-TASK': {\n      const stateCopy = { ...state };\n      const tasks = stateCopy[action.todolistId];\n      stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId);\n      return stateCopy;\n    }\n    case 'ADD-TASK': {\n      const stateCopy = { ...state };\n      const newTask: TaskType = {\n        id: v1(),\n        title: action.title,\n        isDone: false,\n      };\n      const tasks = stateCopy[action.todolistId];\n      const newTasks = [newTask, ...tasks];\n      stateCopy[action.todolistId] = newTasks;\n      return stateCopy;\n    }\n    case 'CHANGE-TASK-STATUS': {\n      const stateCopy = { ...state };\n      const todolistTasks = state[action.todolistId];\n      const newTasksArray = todolistTasks.map(t =>\n        t.id === action.taskId ? { ...t, isDone: action.isDone } : t,\n      );\n      stateCopy[action.todolistId] = newTasksArray;\n      return stateCopy;\n    }\n    case 'CHANGE-TASK-TITLE': {\n      const stateCopy = { ...state };\n      const todolistTasks = state[action.todolistId];\n      const newTasksArray = todolistTasks.map(t =>\n        t.id === action.taskId ? { ...t, title: action.title } : t,\n      );\n      stateCopy[action.todolistId] = newTasksArray;\n      return stateCopy;\n    }\n    case 'ADD-TODOLIST': {\n      return {\n        ...state,\n        [action.todolistId]: [],\n      };\n    }\n    case 'DELETE-TODOLIST': {\n      const copyState = { ...state };\n      delete copyState[action.todolistId];\n      return copyState;\n    }\n    case 'UPDATE-TASK': {\n      const stateCopy = { ...state };\n      stateCopy[action.todolistId] = action.task;\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n};\n\nexport const deleteTask = (taskId: string, todolistId: string) =>\n  ({\n    type: 'DELETE-TASK',\n    taskId,\n    todolistId,\n  } as const);\nexport const addTask = (title: string, todolistId: string) =>\n  ({\n    type: 'ADD-TASK',\n    title,\n    todolistId,\n  } as const);\nexport const changeTaskStatus = (taskId: string, isDone: boolean, todolistId: string) =>\n  ({\n    type: 'CHANGE-TASK-STATUS',\n    isDone,\n    todolistId,\n    taskId,\n  } as const);\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) =>\n  ({\n    type: 'CHANGE-TASK-TITLE',\n    title,\n    todolistId,\n    taskId,\n  } as const);\nexport const updateTask = (task: TaskType[], todolistId: string) =>\n  ({\n    type: 'UPDATE-TASK',\n    task,\n    todolistId,\n  } as const);\n// type\nexport type InitialState = typeof initialState;\nexport type DeleteTaskActionType = ReturnType<typeof deleteTask>;\nexport type AddTaskActionType = ReturnType<typeof addTask>;\nexport type ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatus>;\nexport type ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitle>;\nexport type UpdateTaskActionType = ReturnType<typeof updateTask>;\n\ntype ActionsType =\n  | DeleteTaskActionType\n  | AddTaskActionType\n  | ChangeTaskStatusActionType\n  | ChangeTaskTitleActionType\n  | AddTodoListActionType\n  | DeleteTodoListActionType\n  | UpdateTaskActionType;\n","import React, { useCallback } from 'react';\n\nimport { Button, IconButton } from '@material-ui/core';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useDispatch } from 'react-redux';\n\nimport { AddItemForm } from '../AddItemForm';\n\nimport { FilterType } from 'App';\nimport { Task, EditableSpan } from 'components';\nimport { updateTask } from 'store/tasksReducer';\n\nexport const Todolist: React.FC<TodoListPropsType> = React.memo(\n  ({\n    id,\n    title,\n    tasks,\n    changeFilter,\n    addTask,\n    changeTaskStatus,\n    changeTaskTitle,\n    deleteTask,\n    deleteTodolist,\n    changeTodoListTitle,\n    filter,\n  }) => {\n    const dispatch = useDispatch();\n    const addTaskNew = useCallback(\n      (newTitle: string) => {\n        addTask(newTitle, id);\n      },\n      [addTask, id],\n    );\n\n    const removeTodolist = (): void => deleteTodolist(id);\n    const changeTodolistTitle = useCallback(\n      (changeTitle: string) => {\n        changeTodoListTitle(id, changeTitle);\n      },\n      [id, changeTodoListTitle],\n    );\n\n    const onAllClickHandler = useCallback(\n      () => changeFilter('all', id),\n      [changeFilter, id],\n    );\n    const onActiveClickHandler = useCallback(\n      () => changeFilter('active', id),\n      [changeFilter, id],\n    );\n    const onCompletedClickHandler = useCallback(\n      () => changeFilter('completed', id),\n      [changeFilter, id],\n    );\n\n    let tasksForTodolist = tasks;\n\n    if (filter === 'active') {\n      tasksForTodolist = tasks.filter(t => !t.isDone);\n    }\n    if (filter === 'completed') {\n      tasksForTodolist = tasks.filter(t => t.isDone);\n    }\n\n    const onDragEnd = (result: DropResult): void => {\n      const { source, destination } = result;\n      if (!destination) return;\n\n      const newTaskIds = Array.from(tasksForTodolist);\n      const [newOrder] = newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, newOrder);\n\n      dispatch(updateTask(newTaskIds, id));\n    };\n    return (\n      <div>\n        <h3>\n          <EditableSpan value={title} onChange={changeTodolistTitle} />\n          <IconButton onClick={removeTodolist}>\n            <DeleteForeverIcon />\n          </IconButton>\n        </h3>\n        <AddItemForm addItem={addTaskNew} />\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable key={id} droppableId={id}>\n            {provided => (\n              <div {...provided.droppableProps} ref={provided.innerRef}>\n                {tasksForTodolist.map((t, index) => (\n                  <Task\n                    task={t}\n                    changeTaskStatus={changeTaskStatus}\n                    changeTaskTitle={changeTaskTitle}\n                    removeTask={deleteTask}\n                    todolistId={id}\n                    key={t.id}\n                    index={index}\n                  />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <div style={{ paddingTop: '10px' }}>\n          <Button\n            variant={filter === 'all' ? 'contained' : 'text'}\n            onClick={onAllClickHandler}\n            color=\"primary\"\n          >\n            All\n          </Button>\n          <Button\n            variant={filter === 'active' ? 'contained' : 'text'}\n            onClick={onActiveClickHandler}\n            color=\"default\"\n          >\n            Active\n          </Button>\n          <Button\n            variant={filter === 'completed' ? 'contained' : 'text'}\n            onClick={onCompletedClickHandler}\n            color=\"secondary\"\n          >\n            Completed\n          </Button>\n        </div>\n      </div>\n    );\n  },\n);\n\n// type\n\nexport type TaskType = {\n  id: string;\n  title: string;\n  isDone: boolean;\n};\n\nexport type TodoListPropsType = {\n  id: string;\n  title: string;\n  tasks: TaskType[];\n  changeFilter: (value: FilterType, todoListId: string) => void;\n  addTask: (title: string, todoListId: string) => void;\n  changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void;\n  changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void;\n  deleteTask: (taskId: string, todoListId: string) => void;\n  deleteTodolist: (id: string) => void;\n  changeTodoListTitle: (id: string, newTitle: string) => void;\n  filter: FilterType;\n};\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { TextField } from '@material-ui/core';\n\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(\n  ({ value, onChange }) => {\n    const [editMode, setEditMode] = useState(false);\n    const [title, setTitle] = useState(value);\n\n    const activateEditMode = (): void => {\n      setEditMode(true);\n      setTitle(value);\n    };\n    const activateViewMode = (): void => {\n      setEditMode(false);\n      onChange(title);\n    };\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>): void => {\n      setTitle(e.currentTarget.value);\n    };\n\n    return editMode ? (\n      <TextField\n        value={title}\n        onChange={changeTitle}\n        autoFocus\n        onBlur={activateViewMode}\n      />\n    ) : (\n      <span onDoubleClick={activateEditMode}>{value}</span>\n    );\n  },\n);\n// type\ntype EditableSpanPropsType = {\n  value: string;\n  onChange: (newValue: string) => void;\n};\n","import React, { ReactElement, useCallback } from 'react';\n\nimport { Container, Grid, Paper } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TaskType } from './components/Todolist/Todolist';\n\nimport { AddItemForm, Todolist } from 'components';\nimport { AppRootStateType } from 'store/store';\nimport {\n  addTask,\n  changeTaskStatus,\n  changeTaskTitle,\n  deleteTask,\n} from 'store/tasksReducer';\nimport {\n  addTodolist,\n  changeTodolistFilter,\n  changeTodolistTitle,\n  deleteTodoList,\n} from 'store/todoListsReducer';\n\nconst App = function (): ReactElement {\n  const todoLists = useSelector<AppRootStateType, TodoListType[]>(\n    state => state.todoLists,\n  );\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n  const dispatch = useDispatch();\n\n  const removeTask = useCallback(\n    (id: string, todoListId: string) => {\n      dispatch(deleteTask(id, todoListId));\n    },\n    [dispatch],\n  );\n\n  const addNewTask = useCallback(\n    (title: string, todoListId: string) => {\n      dispatch(addTask(title, todoListId));\n    },\n    [dispatch],\n  );\n\n  const changeStatus = useCallback(\n    (id: string, isDone: boolean, todoListId: string) => {\n      dispatch(changeTaskStatus(id, isDone, todoListId));\n    },\n    [dispatch],\n  );\n\n  const changeTitle = useCallback(\n    (id: string, newTitle: string, todolistId: string) => {\n      dispatch(changeTaskTitle(id, newTitle, todolistId));\n    },\n    [dispatch],\n  );\n\n  const changeFilter = useCallback(\n    (value: FilterType, todolistId: string) => {\n      dispatch(changeTodolistFilter(todolistId, value));\n    },\n    [dispatch],\n  );\n\n  const removeTodolist = useCallback(\n    (id: string) => {\n      dispatch(deleteTodoList(id));\n    },\n    [dispatch],\n  );\n\n  const changeTodoListTitle = useCallback(\n    (id: string, title: string) => {\n      dispatch(changeTodolistTitle(id, title));\n    },\n    [dispatch],\n  );\n\n  const addTodoList = useCallback(\n    (title: string) => {\n      dispatch(addTodolist(title));\n    },\n    [dispatch],\n  );\n\n  return (\n    <Container fixed>\n      <Grid container style={{ padding: '20px' }}>\n        <AddItemForm addItem={addTodoList} />\n      </Grid>\n      <Grid container spacing={3}>\n        {todoLists.map(tl => {\n          const tasksForTodolist = tasks[tl.id];\n          return (\n            <Grid item key={tl.id}>\n              <Paper elevation={3} style={{ padding: '10px' }}>\n                <Todolist\n                  key={tl.id}\n                  id={tl.id}\n                  title={tl.title}\n                  tasks={tasksForTodolist}\n                  deleteTask={removeTask}\n                  changeFilter={changeFilter}\n                  addTask={addNewTask}\n                  changeTaskStatus={changeStatus}\n                  filter={tl.filter}\n                  deleteTodolist={removeTodolist}\n                  changeTaskTitle={changeTitle}\n                  changeTodoListTitle={changeTodoListTitle}\n                />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n// type\nexport type FilterType = 'all' | 'active' | 'completed';\nexport type TodoListType = {\n  id: string;\n  title: string;\n  filter: FilterType;\n};\nexport type TasksStateType = {\n  [key: string]: TaskType[];\n};\n","import { v1 } from 'uuid';\n\nimport { FilterType, TodoListType } from '../App';\n\nexport const todoListsReducer = (\n  // eslint-disable-next-line default-param-last\n  state: TodoListType[] = [],\n  action: ActionsType,\n): TodoListType[] => {\n  switch (action.type) {\n    case 'DELETE-TODOLIST': {\n      return state.filter(tl => tl.id !== action.todolistId);\n    }\n    case 'ADD-TODOLIST': {\n      return [\n        {\n          id: action.todolistId,\n          title: action.title,\n          filter: 'all',\n        },\n        ...state,\n      ];\n    }\n    case 'CHANGE-TODOLIST-TITLE': {\n      const todolist = state.find(tl => tl.id === action.id);\n      if (todolist) {\n        todolist.title = action.title;\n      }\n      return [...state];\n    }\n    case 'CHANGE-TODOLIST-FILTER': {\n      const todolist = state.find(tl => tl.id === action.id);\n      if (todolist) {\n        todolist.filter = action.filter;\n      }\n      return [...state];\n    }\n    default:\n      return state;\n  }\n};\n\nexport const deleteTodoList = (todolistId: string) =>\n  ({\n    type: 'DELETE-TODOLIST',\n    todolistId,\n  } as const);\nexport const addTodolist = (title: string) =>\n  ({\n    type: 'ADD-TODOLIST',\n    title,\n    todolistId: v1(),\n  } as const);\nexport const changeTodolistTitle = (id: string, title: string) =>\n  ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title,\n  } as const);\nexport const changeTodolistFilter = (id: string, filter: FilterType) =>\n  ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter,\n  } as const);\n\n// type\nexport type DeleteTodoListActionType = ReturnType<typeof deleteTodoList>;\nexport type AddTodoListActionType = ReturnType<typeof addTodolist>;\nexport type ChangeTodoListTitleActionType = ReturnType<typeof changeTodolistTitle>;\nexport type ChangeTodoListFilterActionType = ReturnType<typeof changeTodolistFilter>;\n\nexport type ActionsType =\n  | DeleteTodoListActionType\n  | AddTodoListActionType\n  | ChangeTodoListTitleActionType\n  | ChangeTodoListFilterActionType;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from 'redux';\n\nimport { tasksReducer } from './tasksReducer';\nimport { todoListsReducer } from './todoListsReducer';\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todoLists: todoListsReducer,\n});\n\nexport const store = createStore(rootReducer);\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}