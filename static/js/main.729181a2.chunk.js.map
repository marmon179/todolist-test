{"version":3,"sources":["selectors/getIsTasks.ts","selectors/getIsTodoList.ts","store/action-creators/actionCreatorsTasks/actionCreatorsTasks.ts","store/action-creators/actionCreatorsTodoList/actionCreatorsTodoList.ts","components/AddItemForm/AddItemForm.tsx","components/AddItemForm/hooks/useItemForm/useItemForm.ts","components/Task/Task.tsx","components/Task/styles/getItemStyle.ts","components/Todolist/Todolist.tsx","components/EditableSpan/EditableSpan.tsx","App.tsx","reportWebVitals.ts","store/reducers/tasksReducer/tasksReducer.ts","store/store.ts","store/reducers/todoListReducer/todoListsReducer.ts","index.tsx"],"names":["getIsTasks","state","tasks","getIsTodoList","todoLists","DELETE_TASK","ADD_TASK","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","UPDATE_TASK","DELETE_TODOLIST","ADD_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","AddItemForm","memo","addItem","useState","title","setTitle","error","setError","onTextFieldChange","e","currentTarget","value","useItemForm","onIconButtonClick","trim","TextField","variant","onChange","onKeyPress","charCode","label","helperText","IconButton","color","onClick","Task","changeTaskStatus","changeTaskTitle","removeTask","task","todolistId","index","id","onCheckboxChange","doneValue","checked","onTitleChange","useCallback","draggableId","provided","snapshot","draggableProps","ref","innerRef","style","isDragging","draggableStyle","background","borderRadius","dragHandleProps","Checkbox","isDone","EditableSpan","Todolist","changeFilter","addTask","deleteTask","deleteTodolist","changeTodoListTitle","filter","addTaskNew","newTitle","changeTodolistTitle","changeTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","t","droppableId","droppableProps","map","placeholder","paddingTop","Button","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","App","useSelector","dispatch","useDispatch","todoListId","type","taskId","addNewTask","changeStatus","removeTodolist","addTodoList","v1","addTodolist","Container","fixed","Grid","container","padding","spacing","onDragEnd","result","source","destination","newTaskIds","Array","from","splice","newOrder","item","Paper","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialTasksState","count","rootReducer","combineReducers","action","stateCopy","newTask","newTasks","todolistTasks","newTasksArray","copyState","tl","todolist","find","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.729181a2.chunk.js","sourcesContent":["import { AppRootStateType } from '../store/store';\nimport { TasksStateType } from '../types/types';\n\nexport const getIsTasks = (state: AppRootStateType): TasksStateType => state.tasks;\n","import { AppRootStateType } from '../store/store';\nimport { TodoListType } from '../types/types';\n\nexport const getIsTodoList = (state: AppRootStateType): TodoListType[] => state.todoLists;\n","import { TaskType } from '../../../components/Todolist/types';\n\nexport const DELETE_TASK = '@@tasks-reducer/DELETE-TASK';\nexport const ADD_TASK = '@@tasks-reducer/ADD-TASK';\nexport const CHANGE_TASK_STATUS = '@@tasks-reducer/CHANGE-TASK-STATUS';\nexport const CHANGE_TASK_TITLE = '@@tasks-reducer/CHANGE-TASK-TITLE';\nexport const UPDATE_TASK = '@@tasks-reducer/UPDATE-TASK';\n\nexport const deleteTask = (taskId: string, todolistId: string) =>\n  ({\n    type: DELETE_TASK,\n    taskId,\n    todolistId,\n  } as const);\nexport const addTask = (title: string, todolistId: string) =>\n  ({\n    type: ADD_TASK,\n    title,\n    todolistId,\n  } as const);\nexport const changeTaskStatus = (taskId: string, isDone: boolean, todolistId: string) =>\n  ({\n    type: CHANGE_TASK_STATUS,\n    isDone,\n    todolistId,\n    taskId,\n  } as const);\nexport const changeTaskTitle = (taskId: string, title: string, todolistId: string) =>\n  ({\n    type: CHANGE_TASK_TITLE,\n    title,\n    todolistId,\n    taskId,\n  } as const);\nexport const updateTask = (task: TaskType[], todolistId: string) =>\n  ({\n    type: UPDATE_TASK,\n    task,\n    todolistId,\n  } as const);\n","import { v1 } from 'uuid';\n\nimport { FilterType } from '../../../types/types';\n\nexport const DELETE_TODOLIST = '@@todolist-reducer/DELETE-TODOLIST';\nexport const ADD_TODOLIST = '@@todolist-reducer/ADD-TODOLIST';\nexport const CHANGE_TODOLIST_TITLE = '@@todolist-reducer/CHANGE-TODOLIST-TITLE';\nexport const CHANGE_TODOLIST_FILTER = '@@todolist-reducer/CHANGE-TODOLIST-FILTER';\n\nexport const deleteTodoList = (todolistId: string) =>\n  ({\n    type: DELETE_TODOLIST,\n    todolistId,\n  } as const);\nexport const addTodolist = (title: string) =>\n  ({\n    type: ADD_TODOLIST,\n    title,\n    todolistId: v1(),\n  } as const);\nexport const changeTodolistTitle = (id: string, title: string) =>\n  ({\n    type: CHANGE_TODOLIST_TITLE,\n    id,\n    title,\n  } as const);\nexport const changeTodolistFilter = (id: string, filter: FilterType) =>\n  ({\n    type: CHANGE_TODOLIST_FILTER,\n    id,\n    filter,\n  } as const);\n","import React, { FC, KeyboardEvent, memo } from 'react';\n\nimport { IconButton, TextField } from '@material-ui/core';\nimport AddBoxTwoToneIcon from '@material-ui/icons/AddBoxTwoTone';\n\nimport { useItemForm } from './hooks/useItemForm/useItemForm';\nimport { AddItemFormPropsType } from './types';\n\nexport const AddItemForm: FC<AddItemFormPropsType> = memo(({ addItem }) => {\n  const { title, error, setTitle, setError, onTextFieldChange } = useItemForm();\n  const onIconButtonClick = (): void => {\n    if (title.trim() !== '') {\n      addItem(title);\n      setTitle('');\n    } else {\n      setError('Title is required');\n    }\n  };\n\n  const onTextFieldKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.charCode === 13) {\n      onIconButtonClick();\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        variant=\"standard\"\n        error={!!error}\n        value={title}\n        onChange={onTextFieldChange}\n        onKeyPress={onTextFieldKeyPress}\n        label=\"Title\"\n        helperText={error}\n      />\n      <IconButton color=\"primary\" onClick={onIconButtonClick}>\n        <AddBoxTwoToneIcon />\n      </IconButton>\n    </div>\n  );\n});\n","import { ChangeEvent, useState } from 'react';\n\nimport { Nullable } from '../../../../types/Nullable';\n\nimport { useItemFormType } from './types';\n\nexport const useItemForm = (): useItemFormType => {\n  const [title, setTitle] = useState('');\n  const [error, setError] = useState<Nullable<string>>(null);\n\n  const onTextFieldChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return { title, error, setTitle, setError, onTextFieldChange };\n};\n","import React, { ChangeEvent, FC, memo, useCallback } from 'react';\n\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport DehazeIcon from '@material-ui/icons/Dehaze';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { getItemStyle } from './styles/getItemStyle';\nimport { TaskPropsType } from './types';\n\nimport { EditableSpan } from 'components';\n\nexport const Task: FC<TaskPropsType> = memo(\n  ({ changeTaskStatus, changeTaskTitle, removeTask, task, todolistId, index }) => {\n    const onIconButtonClick = (): void => removeTask(task.id, todolistId);\n    const onCheckboxChange = (e: ChangeEvent<HTMLInputElement>): void => {\n      const doneValue = e.currentTarget.checked;\n      changeTaskStatus(task.id, doneValue, todolistId);\n    };\n    const onTitleChange = useCallback(\n      (value: string) => {\n        changeTaskTitle(task.id, value, todolistId);\n      },\n      [task.id, changeTaskTitle, todolistId],\n    );\n\n    return (\n      <Draggable draggableId={task.id} index={index}>\n        {(provided, snapshot) => (\n          <div\n            {...provided.draggableProps}\n            ref={provided.innerRef}\n            style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n          >\n            <IconButton {...provided.dragHandleProps}>\n              <DehazeIcon />\n            </IconButton>\n            <Checkbox\n              checked={task.isDone}\n              color=\"secondary\"\n              onChange={onCheckboxChange}\n            />\n\n            <EditableSpan value={task.title} onChange={onTitleChange} />\n            <IconButton onClick={onIconButtonClick}>\n              <DeleteForeverIcon />\n            </IconButton>\n          </div>\n        )}\n      </Draggable>\n    );\n  },\n);\n","import { CSSProperties } from 'react';\n\nexport const getItemStyle = (\n  isDragging: boolean,\n  draggableStyle: any,\n): CSSProperties | undefined => ({\n  background: isDragging ? '#3f51b5' : 'white',\n  color: isDragging ? 'white' : 'black',\n  borderRadius: `5px`,\n  ...draggableStyle,\n});\n","import React, { FC, memo, useCallback } from 'react';\n\nimport { Button, IconButton } from '@material-ui/core';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { Droppable } from 'react-beautiful-dnd';\n\nimport { AddItemForm } from '../AddItemForm';\n\nimport { TodoListPropsType } from './types';\n\nimport { EditableSpan, Task } from 'components';\n\nexport const Todolist: FC<TodoListPropsType> = memo(\n  ({\n    id,\n    title,\n    tasks,\n    changeFilter,\n    addTask,\n    changeTaskStatus,\n    changeTaskTitle,\n    deleteTask,\n    deleteTodolist,\n    changeTodoListTitle,\n    filter,\n  }) => {\n    const addTaskNew = useCallback(\n      (newTitle: string) => {\n        addTask(newTitle, id);\n      },\n      [addTask, id],\n    );\n\n    const removeTodolist = (): void => deleteTodolist(id);\n    const changeTodolistTitle = useCallback(\n      (changeTitle: string) => {\n        changeTodoListTitle(id, changeTitle);\n      },\n      [id, changeTodoListTitle],\n    );\n\n    const onAllClickHandler = useCallback(\n      () => changeFilter('all', id),\n      [changeFilter, id],\n    );\n    const onActiveClickHandler = useCallback(\n      () => changeFilter('active', id),\n      [changeFilter, id],\n    );\n    const onCompletedClickHandler = useCallback(\n      () => changeFilter('completed', id),\n      [changeFilter, id],\n    );\n\n    let tasksForTodolist = tasks;\n\n    if (filter === 'active') {\n      tasksForTodolist = tasks.filter(t => !t.isDone);\n    }\n    if (filter === 'completed') {\n      tasksForTodolist = tasks.filter(t => t.isDone);\n    }\n    return (\n      <div>\n        <h3>\n          <EditableSpan value={title} onChange={changeTodolistTitle} />\n          <IconButton onClick={removeTodolist}>\n            <DeleteForeverIcon />\n          </IconButton>\n        </h3>\n        <AddItemForm addItem={addTaskNew} />\n\n        <Droppable key={id} droppableId={id}>\n          {provided => (\n            <div {...provided.droppableProps} ref={provided.innerRef}>\n              {tasksForTodolist.map((task, index) => (\n                <Task\n                  task={task}\n                  changeTaskStatus={changeTaskStatus}\n                  changeTaskTitle={changeTaskTitle}\n                  removeTask={deleteTask}\n                  todolistId={id}\n                  key={task.id}\n                  index={index}\n                />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n\n        <div style={{ paddingTop: '10px' }}>\n          <Button\n            variant={filter === 'all' ? 'contained' : 'text'}\n            onClick={onAllClickHandler}\n            color=\"primary\"\n          >\n            All\n          </Button>\n          <Button\n            variant={filter === 'active' ? 'contained' : 'text'}\n            onClick={onActiveClickHandler}\n            color=\"default\"\n          >\n            Active\n          </Button>\n          <Button\n            variant={filter === 'completed' ? 'contained' : 'text'}\n            onClick={onCompletedClickHandler}\n            color=\"secondary\"\n          >\n            Completed\n          </Button>\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { ChangeEvent, FC, memo, useState } from 'react';\n\nimport { TextField } from '@material-ui/core';\n\nimport { EditableSpanPropsType } from './types';\n\nexport const EditableSpan: FC<EditableSpanPropsType> = memo(({ value, onChange }) => {\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState(value);\n\n  const onTitleDoubleClick = (): void => {\n    setEditMode(true);\n    setTitle(value);\n  };\n  const onTextFieldBlur = (): void => {\n    setEditMode(false);\n    onChange(title);\n  };\n  const onTitleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField\n      value={title}\n      onChange={onTitleChange}\n      autoFocus\n      onBlur={onTextFieldBlur}\n    />\n  ) : (\n    <span onDoubleClick={onTitleDoubleClick}>{value}</span>\n  );\n});\n","import React, { ReactElement, useCallback } from 'react';\n\nimport { Container, Grid, Paper } from '@material-ui/core';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getIsTasks } from './selectors/getIsTasks';\nimport { getIsTodoList } from './selectors/getIsTodoList';\nimport {\n  addTask,\n  changeTaskStatus,\n  changeTaskTitle,\n  deleteTask,\n  updateTask,\n} from './store/action-creators/actionCreatorsTasks/actionCreatorsTasks';\nimport {\n  addTodolist,\n  changeTodolistFilter,\n  changeTodolistTitle,\n  deleteTodoList,\n} from './store/action-creators/actionCreatorsTodoList/actionCreatorsTodoList';\nimport { FilterType, TasksStateType, TodoListType } from './types/types';\n\nimport { AddItemForm, Todolist } from 'components';\nimport { AppRootStateType } from 'store/store';\n\nconst App = function (): ReactElement {\n  const todoLists = useSelector<AppRootStateType, TodoListType[]>(getIsTodoList);\n  const tasks = useSelector<AppRootStateType, TasksStateType>(getIsTasks);\n  const dispatch = useDispatch();\n\n  const removeTask = useCallback(\n    (id: string, todoListId: string) => {\n      dispatch(deleteTask(id, todoListId));\n    },\n    [dispatch],\n  );\n\n  const addNewTask = useCallback(\n    (title: string, todoListId: string) => {\n      dispatch(addTask(title, todoListId));\n    },\n    [dispatch],\n  );\n\n  const changeStatus = useCallback(\n    (id: string, isDone: boolean, todoListId: string) => {\n      dispatch(changeTaskStatus(id, isDone, todoListId));\n    },\n    [dispatch],\n  );\n\n  const changeTitle = useCallback(\n    (id: string, newTitle: string, todolistId: string) => {\n      dispatch(changeTaskTitle(id, newTitle, todolistId));\n    },\n    [dispatch],\n  );\n\n  const changeFilter = useCallback(\n    (value: FilterType, todolistId: string) => {\n      dispatch(changeTodolistFilter(todolistId, value));\n    },\n    [dispatch],\n  );\n\n  const removeTodolist = useCallback(\n    (id: string) => {\n      dispatch(deleteTodoList(id));\n    },\n    [dispatch],\n  );\n\n  const changeTodoListTitle = useCallback(\n    (id: string, title: string) => {\n      dispatch(changeTodolistTitle(id, title));\n    },\n    [dispatch],\n  );\n\n  const addTodoList = useCallback(\n    (title: string) => {\n      dispatch(addTodolist(title));\n    },\n    [dispatch],\n  );\n\n  return (\n    <Container fixed>\n      <Grid container style={{ padding: '20px' }}>\n        <AddItemForm addItem={addTodoList} />\n      </Grid>\n\n      <Grid container spacing={3}>\n        {todoLists.map(({ id, title, filter }) => {\n          const tasksForTodolist = tasks[id];\n\n          const onDragEnd = (result: DropResult): void => {\n            const { source, destination } = result;\n            if (!destination) return;\n\n            const newTaskIds = Array.from(tasksForTodolist);\n            const [newOrder] = newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, newOrder);\n\n            dispatch(updateTask(newTaskIds, id));\n          };\n          return (\n            <DragDropContext key={id} onDragEnd={onDragEnd}>\n              <Grid item key={id}>\n                <Paper elevation={3} style={{ padding: '10px' }}>\n                  <Todolist\n                    key={id}\n                    id={id}\n                    title={title}\n                    tasks={tasksForTodolist}\n                    deleteTask={removeTask}\n                    changeFilter={changeFilter}\n                    addTask={addNewTask}\n                    changeTaskStatus={changeStatus}\n                    filter={filter}\n                    deleteTodolist={removeTodolist}\n                    changeTaskTitle={changeTitle}\n                    changeTodoListTitle={changeTodoListTitle}\n                  />\n                </Paper>\n              </Grid>\n            </DragDropContext>\n          );\n        })}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { v1 } from 'uuid';\n\nimport { TaskType } from '../../../components/Todolist/types';\nimport { TasksStateType } from '../../../types/types';\nimport {\n  ADD_TASK,\n  CHANGE_TASK_STATUS,\n  CHANGE_TASK_TITLE,\n  DELETE_TASK,\n  UPDATE_TASK,\n} from '../../action-creators/actionCreatorsTasks/actionCreatorsTasks';\nimport {\n  ActionsTasksType,\n  InitialTasksState,\n} from '../../action-creators/actionCreatorsTasks/types';\nimport {\n  ADD_TODOLIST,\n  DELETE_TODOLIST,\n} from '../../action-creators/actionCreatorsTodoList/actionCreatorsTodoList';\n\nexport const initialTasksState: TasksStateType = {\n  count: [],\n};\n\nexport const tasksReducer = (\n  // eslint-disable-next-line default-param-last\n  state: InitialTasksState = initialTasksState,\n  action: ActionsTasksType,\n): InitialTasksState => {\n  switch (action.type) {\n    case DELETE_TASK: {\n      const stateCopy = { ...state };\n      const tasks = stateCopy[action.todolistId];\n      stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId);\n      return stateCopy;\n    }\n    case ADD_TASK: {\n      const { title, todolistId } = action;\n      const stateCopy = { ...state };\n      const newTask: TaskType = {\n        id: v1(),\n        title,\n        isDone: false,\n      };\n      const tasks = stateCopy[todolistId];\n      const newTasks = [newTask, ...tasks];\n      stateCopy[todolistId] = newTasks;\n      return stateCopy;\n    }\n    case CHANGE_TASK_STATUS: {\n      const { todolistId, isDone, taskId } = action;\n      const stateCopy = { ...state };\n      const todolistTasks = state[todolistId];\n      const newTasksArray = todolistTasks.map(t =>\n        t.id === taskId ? { ...t, isDone } : t,\n      );\n      stateCopy[action.todolistId] = newTasksArray;\n      return stateCopy;\n    }\n    case CHANGE_TASK_TITLE: {\n      const { title, todolistId, taskId } = action;\n      const stateCopy = { ...state };\n      const todolistTasks = state[todolistId];\n      const newTasksArray = todolistTasks.map(task =>\n        task.id === taskId ? { ...task, title } : task,\n      );\n      stateCopy[todolistId] = newTasksArray;\n      return stateCopy;\n    }\n    case ADD_TODOLIST: {\n      const { todolistId } = action;\n      return {\n        ...state,\n        [todolistId]: [],\n      };\n    }\n    case DELETE_TODOLIST: {\n      const { todolistId } = action;\n      const copyState = { ...state };\n      delete copyState[todolistId];\n      return copyState;\n    }\n    case UPDATE_TASK: {\n      const { task, todolistId } = action;\n      const stateCopy = { ...state };\n      stateCopy[todolistId] = task;\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore } from 'redux';\n\nimport { tasksReducer } from './reducers/tasksReducer/tasksReducer';\nimport { todoListsReducer } from './reducers/todoListReducer/todoListsReducer';\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todoLists: todoListsReducer,\n});\n\nexport const store = createStore(rootReducer);\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\nwindow.store = store;\n","import { TodoListType } from '../../../types/types';\nimport {\n  ADD_TODOLIST,\n  CHANGE_TODOLIST_FILTER,\n  CHANGE_TODOLIST_TITLE,\n  DELETE_TODOLIST,\n} from '../../action-creators/actionCreatorsTodoList/actionCreatorsTodoList';\nimport { ActionsTodoListType } from '../../action-creators/actionCreatorsTodoList/types';\n\nexport const todoListsReducer = (\n  // eslint-disable-next-line default-param-last\n  state: TodoListType[] = [],\n  action: ActionsTodoListType,\n): TodoListType[] => {\n  switch (action.type) {\n    case DELETE_TODOLIST: {\n      const { todolistId } = action;\n      return state.filter(tl => tl.id !== todolistId);\n    }\n    case ADD_TODOLIST: {\n      const { title, todolistId } = action;\n      return [\n        {\n          id: todolistId,\n          title,\n          filter: 'all',\n        },\n        ...state,\n      ];\n    }\n    case CHANGE_TODOLIST_TITLE: {\n      const { id, title } = action;\n      const todolist = state.find(tl => tl.id === id);\n      if (todolist) {\n        todolist.title = title;\n      }\n      return [...state];\n    }\n    case CHANGE_TODOLIST_FILTER: {\n      const { id, filter } = action;\n      const todolist = state.find(tl => tl.id === id);\n      if (todolist) {\n        todolist.filter = filter;\n      }\n      return [...state];\n    }\n    default:\n      return state;\n  }\n};\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}