{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","React","memo","addItem","useState","title","setTitle","error","setError","add_Item","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","task","todolistId","onTitleChangeHandler","useCallback","id","Checkbox","checked","isDone","doneValue","Todolist","tasks","changeFilter","addTask","deleteTask","deleteTodolist","changeTodoListTitle","filter","addTaskNew","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","t","map","style","paddingTop","Button","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","todoListId","find","newTitle","todoList","tl","Container","fixed","Grid","container","padding","newTodoListId","spacing","item","Paper","elevation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f4c92ea.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport AddBoxTwoToneIcon from '@material-ui/icons/AddBoxTwoTone';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo((\r\n    {\r\n        addItem\r\n    }\r\n) => {\r\n    const [title, setTitle] = useState('');\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const add_Item = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            add_Item();\r\n        }\r\n    };\r\n\r\n    return <div>\r\n        <TextField variant=\"standard\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={add_Item}>\r\n            <AddBoxTwoToneIcon/>\r\n        </IconButton>\r\n    </div>;\r\n});\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo((\r\n    {\r\n        value, onChange\r\n    }\r\n) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [title, setTitle] = useState(value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(value);\r\n    };\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        onChange(title);\r\n    };\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    };\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>;\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {TaskType} from './Todolist';\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo((\r\n    {\r\n        changeTaskStatus, changeTaskTitle, removeTask, task, todolistId\r\n    }\r\n) => {\r\n    const onClickHandler = () => removeTask(task.id, todolistId);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const doneValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, doneValue, todolistId);\r\n    };\r\n    const onTitleChangeHandler = useCallback((value: string) => {\r\n        changeTaskTitle(task.id, value, todolistId);\r\n    }, [task.id, changeTaskTitle, todolistId]);\r\n\r\n\r\n    return <div key={task.id}>\r\n        <Checkbox\r\n            checked={task.isDone}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <DeleteForeverIcon/>\r\n        </IconButton>\r\n    </div>;\r\n});\r\n","import React, {useCallback} from 'react';\r\nimport {FilterType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport {Task} from './Task';\r\n\r\nexport const Todolist: React.FC<PropsType> = React.memo((\r\n    {\r\n        id, title, tasks, changeFilter, addTask, changeTaskStatus, changeTaskTitle,\r\n        deleteTask, deleteTodolist, changeTodoListTitle, filter\r\n    }\r\n) => {\r\n    const addTaskNew = useCallback((title: string) => {\r\n        addTask(title, id);\r\n    }, [addTask, id]);\r\n\r\n    const removeTodolist = () => {\r\n        deleteTodolist(id);\r\n    };\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodoListTitle(id, title);\r\n    }, [id, changeTodoListTitle]);\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', id), [changeFilter, id]);\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', id), [changeFilter, id]);\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', id), [changeFilter, id]);\r\n\r\n    let tasksForTodolist = tasks;\r\n\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <DeleteForeverIcon/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskNew}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    removeTask={deleteTask}\r\n                    todolistId={id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={filter === 'all' ? 'contained' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'primary'}\r\n            >All\r\n            </Button>\r\n            <Button variant={filter === 'active' ? 'contained' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'default'}>Active\r\n            </Button>\r\n            <Button variant={filter === 'completed' ? 'contained' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>;\r\n});\r\n\r\n//type\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    changeFilter: (value: FilterType, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n    deleteTodolist: (id: string) => void\r\n    changeTodoListTitle: (id: string, newTitle: string) => void\r\n    filter: FilterType\r\n\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from './Todolist';\nimport {v1} from 'uuid';\nimport {AddItemForm} from './AddItemForm';\nimport {Container, Grid, Paper} from '@material-ui/core';\n\nconst App = () => {\n\n    const todoListId1 = v1();\n    const todoListId2 = v1();\n\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\n        {id: todoListId1, title: 'Hello', filter: 'all'},\n        {id: todoListId2, title: 'Have a nice day', filter: 'all'}\n    ]);\n\n    const [tasks, setTasks] = useState<TasksStateType>({\n        [todoListId1]: [\n            {id: v1(), title: 'world', isDone: true},\n            {id: v1(), title: '!!!', isDone: false}\n        ],\n        [todoListId2]: [\n            {id: v1(), title: 'a', isDone: true},\n            {id: v1(), title: 'nice day', isDone: false}\n        ]\n    });\n\n    const deleteTask = (id: string, todoListId: string) => {\n        tasks[todoListId] = tasks[todoListId].filter(t => t.id !== id);\n        setTasks({...tasks});\n    };\n\n    const addTask = (title: string, todoListId: string) => {\n        const task = {id: v1(), title: title, isDone: false};\n        tasks[todoListId] = [task, ...tasks[todoListId]];\n        setTasks({...tasks});\n    };\n\n    const changeTaskStatus = (id: string, isDone: boolean, todoListId: string) => {\n        const task = tasks[todoListId].find(t => t.id === id);\n        if (task) {\n            task.isDone = isDone;\n            setTasks({...tasks});\n        }\n    };\n\n    const changeTaskTitle = (id: string, newTitle: string, todoListId: string) => {\n        const task = tasks[todoListId].find(t => t.id === id);\n        if (task) {\n            task.title = newTitle;\n            setTasks({...tasks});\n        }\n    };\n\n    const changeFilter = (value: FilterType, todoListId: string) => {\n        const todoList = todoLists.find(tl => tl.id === todoListId);\n        if (todoList) {\n            todoList.filter = value;\n            setTodoLists([...todoLists]);\n        }\n    };\n\n    const deleteTodolist = (id: string) => {\n        setTodoLists(todoLists.filter(tl => tl.id !== id));\n        delete tasks[id];\n        setTasks({...tasks});\n    };\n\n    const changeTodoListTitle = (id: string, title: string) => {\n        const todoList = todoLists.find(tl => tl.id === id);\n        if (todoList) {\n            todoList.title = title;\n            setTodoLists([...todoLists]);\n        }\n    };\n\n    const addTodoList = (title: string) => {\n        const newTodoListId = v1();\n        setTodoLists([{id: newTodoListId, title: title, filter: 'all'}, ...todoLists]);\n        setTasks({...tasks, [newTodoListId]: []});\n    };\n\n    return (\n        <>\n            <Container fixed>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todoLists.map(tl => {\n                            let tasksForTodolist = tasks[tl.id];\n                            return <Grid item>\n                                <Paper elevation={3} style={{padding: '10px'}}>\n                                    <Todolist\n                                        key={tl.id}\n                                        id={tl.id}\n                                        title={tl.title}\n                                        tasks={tasksForTodolist}\n                                        deleteTask={deleteTask}\n                                        changeFilter={changeFilter}\n                                        addTask={addTask}\n                                        changeTaskStatus={changeTaskStatus}\n                                        filter={tl.filter}\n                                        deleteTodolist={deleteTodolist}\n                                        changeTaskTitle={changeTaskTitle}\n                                        changeTodoListTitle={changeTodoListTitle}\n                                    />\n                                </Paper>\n                            </Grid>;\n                        })\n                    }\n                </Grid>\n            </Container>\n        </>\n    );\n};\n\nexport default App;\n//type\nexport type FilterType = 'all' | 'active' | 'completed';\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterType\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}